class LRUCache {
public:
    struct Node{
        int key, value;
        Node* pre, *next;
        Node(int key,int val){
            this->key=key,this->value=val;
            pre=next=nullptr;
        }
    };
    
    int sz;
    Node* head, *tail;
    unordered_map<int, Node*> mp;
    
    void add_front(int key,int val){
        Node* root=new Node(key, val);
        root->next=head->next, root->pre=head,
        head->next->pre=root,head->next=root;
        mp[key]=root;
        return ;
    }
    
    void del_Node(int key){
        Node* root=mp[key];
        mp.erase(key);
        root->pre->next=root->next,
        root->next->pre=root->pre;
        delete(root);
    }
    
    void pop_back(){
        Node* root=tail->pre;
        del_Node(root->key);
    }
    
    LRUCache(int capacity){
        sz=capacity;
        head=new Node(0, 0);tail=new Node(0, 0);
        head->next=tail,tail->pre=head;
    }
    
    int get(int key){
        if(!mp.count(key))
            return -1;
        int val=mp[key]->value;
        del_Node(key);
        add_front(key, val);
        return val;
    }
    
    void put(int key, int value){
        if(mp.count(key)){
            del_Node(key);
            add_front(key, value);
            return ;
        }
        if(sz>0){
            add_front(key, value), sz--;
            return;
        }
        pop_back();
        add_front(key, value);
        return ;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
